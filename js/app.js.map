{"version":3,"sources":["app.js"],"names":[],"mappings":";;;;AACA,IAAM,gBAAgB,sGAAtB;AACA,IAAM,WAAW,mkBAAjB;AACA,IAAM,qBAAqB,SAArB,kBAAqB;AAAA,WAAM,SAAS,KAAK,MAAL,KAAgB,GAAzB,EAA8B,QAA9B,CAAuC,EAAvC,CAAN;AAAA,CAA3B;AACA,IAAM,cAAc,SAAd,WAAc;AAAA,iBAAU,oBAAV,GAAiC,oBAAjC,GAAwD,oBAAxD;AAAA,CAApB;;AAEA,OAAO,OAAP,6CAAiB;AAAA;AAAA;AAAA;AAAA;AAAA;AACP,4BADO,GACI,IAAI,OAAO,IAAP,CAAY,QAAhB,EADJ;;AAGb;;AACM,wCAJO,GAIgB,SAAvB,oBAAuB,CAAS,GAAT,EAAc;AACvC,+BAAO,IAAI,OAAJ,CAAY,UAAC,MAAD,EAAS,MAAT;AAAA,mCACf,SAAS,OAAT,CAAiB,EAAC,WAAW,GAAZ,EAAjB,EAAmC,UAAS,OAAT,EAAkB,MAAlB,EAA0B;AACzD,oCAAI,WAAW,IAAf,EAAqB;AACjB,2CAAO,OAAO,QAAQ,CAAR,EAAW,QAAX,CAAoB,QAA3B,CAAP;AACH;AACD,uCAAO,OAAO,MAAP,CAAP;AACH,6BALD,CADe;AAAA,yBAAZ,CAAP;AAQH,qBAbY;;AAAA;AAAA,2BAeQ,qBAAqB,SAArB,CAfR;;AAAA;AAeP,0BAfO;AAgBP,uBAhBO,GAgBD,IAAI,OAAO,IAAP,CAAY,GAAhB,CAAoB,SAAS,cAAT,CAAwB,YAAxB,CAApB,EAA2D;AACnE,gCAAQ,MAD2D;AAEnE,8BAAM;AAF6D,qBAA3D,CAhBC;AAAA;AAAA,2BAqBM,MAAM,QAAN,EAAgB,IAAhB,CAAqB;AAAA,+BAAY,SAAS,IAAT,EAAZ;AAAA,qBAArB,CArBN;;AAAA;AAqBP,wBArBO;AAuBP,4BAvBO,GAuBI,KAAK,OAAL,CAAa,QAAb,CACZ,GADY,CACR;AAAA,+BACD,CACI,UAAU,cAAV,CACI,IAAI,SAAJ,CAAc,GAAG,SAAH,CAAa,KAA3B,EAAkC,GAAG,SAAH,CAAa,KAA/C,CADJ,CADJ,EAII,UAAU,cAAV,CACI,IAAI,SAAJ,CAAc,GAAG,SAAH,CAAa,KAA3B,EAAkC,GAAG,SAAH,CAAa,KAA/C,CADJ,CAJJ,CADC;AAAA,qBADQ,CAvBJ;AAmCT,6BAnCS,GAmCG,IAAI,OAAO,IAAP,CAAY,YAAhB,EAnCH;;AAoCb,6BAAS,GAAT,CAAa,cAAK;AACd,4BAAM,SAAS,IAAI,OAAO,IAAP,CAAY,MAAhB,CAAuB,GAAG,CAAH,EAAM,GAA7B,EAAkC,GAAG,CAAH,EAAM,GAAxC,CAAf;AACA,4BAAM,SAAS,IAAI,OAAO,IAAP,CAAY,MAAhB,CAAuB,GAAG,CAAH,EAAM,GAA7B,EAAkC,GAAG,CAAH,EAAM,GAAxC,CAAf;;AAEA,kCAAU,MAAV,CAAiB,MAAjB;AACA,kCAAU,MAAV,CAAiB,MAAjB;;AAEC,4BAAI,OAAO,IAAP,CAAY,QAAhB,CAAyB;AACtB,kCAAM,CAAC,MAAD,EAAS,MAAT,CADgB;AAEtB,yCAAa;AAFS,yBAAzB,CAAD,CAGI,MAHJ,CAGW,GAHX;AAKH,qBAZD;;AAcA,wBAAI,SAAJ,CAAc,SAAd;;AAlDa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAjB;;AAsDA,gBAAgB,aAAhB","file":"app.js","sourcesContent":["\nconst mapsScriptUrl = \"https://maps.googleapis.com/maps/api/js?key=AIzaSyBwC-BzmC2WQwxqWjqCl0ROiloWG68UUVs&callback=initMap\";\nconst endpoint = \"http://131.251.176.109:8082/Data/query?query=PREFIX%20wis%3A<http%3A%2F%2Fwww.WISDOM.org%2FWISDOMontology%23>%0APREFIX%20rdf%3A<http%3A%2F%2Fwww.w3.org%2F1999%2F02%2F22-rdf-syntax-ns%23>%0ASELECT%20%20%3FXcoord_US%20%3FYcoord_US%20%3FXcoord_DS%20%3FYcoord_DS%0AWHERE%20%7B%20%0A%3FURI%20wis%3AhasUpstreamNode%20%3FUSnode%20.%0A%3FUSnode%20wis%3AhasXcoord%20%3FXcoord_US%20.%0A%3FUSnode%20wis%3AhasYcoord%20%3FYcoord_US%20.%0A%3FURI%20wis%3AhasDownstreamNode%20%3FDSnode%20.%0A%3FDSnode%20wis%3AhasXcoord%20%3FXcoord_DS%20.%0A%3FDSnode%20wis%3AhasYcoord%20%3FYcoord_DS%20.%0A%7D\";\nconst randomColorChannel = () => parseInt(Math.random() * 256).toString(16);\nconst randomColor = () => `#${randomColorChannel()}${randomColorChannel()}${randomColorChannel()}`;\n\nwindow.initMap = async function() {\n    const geocoder = new google.maps.Geocoder();\n\n    // Will get the LatLng object for a string\n    const stringToLatLngPlaces = function(str) {\n        return new Promise((accept, reject) =>\n            geocoder.geocode({'address': str}, function(results, status) {\n                if (status === 'OK') {\n                    return accept(results[0].geometry.location);\n                }\n                return reject(status);\n            })\n        );\n    }\n\n    const center = await stringToLatLngPlaces(\"swansea\");\n    const map = new google.maps.Map(document.getElementById('google-map'), {\n        center: center,\n        zoom: 13\n    });\n\n    const data = await fetch(endpoint).then(response => response.json());\n\n    const bindings = data.results.bindings\n        .map(it =>\n            [\n                OsGridRef.osGridToLatLon(\n                    new OsGridRef(it.Xcoord_US.value, it.Ycoord_US.value)\n                ),\n                OsGridRef.osGridToLatLon(\n                    new OsGridRef(it.Xcoord_DS.value, it.Ycoord_DS.value)\n                )\n            ]\n    )\n\n    let mapBounds = new google.maps.LatLngBounds();\n    bindings.map(it =>{\n        const pointX = new google.maps.LatLng(it[0].lat, it[0].lon);\n        const pointY = new google.maps.LatLng(it[1].lat, it[1].lon);\n\n        mapBounds.extend(pointX);\n        mapBounds.extend(pointY);\n\n        (new google.maps.Polyline({\n            path: [pointX, pointY],\n            strokeColor: randomColor()\n        })).setMap(map);\n\n    });\n\n    map.fitBounds(mapBounds);\n\n}\n\nloadScriptAsync(mapsScriptUrl);\n"],"sourceRoot":"/source/"}